import unittest
from geister2 import Geister2


class TestState(unittest.TestCase):
    def setUp(self):
        game = Geister2()
        game.setRed(["E", "F", "G", "H"])
        game.changeSide()
        game.setRed(["E", "F", "G", "H"])
        self.game = game

    def test_after_state1(self):
        expected = [[
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            1, 0, 1, 1, 1, 0,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0,
            0, 0, 1, 1, 1, 0,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0,
            0, 1, 0, 1, 1, 0,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 1, 0, 0,
            0, 1, 1, 0, 1, 0,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            0, 1, 1, 1, 0, 1,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 1, 0,
            0, 1, 1, 1, 0, 0,
            0, 2, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            0, 1, 1, 1, 1, 0,
            2, 0, 2, 2, 2, 0,
            0, 0, 0, 0, 0, 0
            ], [
            0, 3, 3, 3, 3, 0,
            0, 3, 3, 3, 3, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            0, 1, 1, 1, 1, 0,
            0, 2, 2, 2, 0, 2,
            0, 0, 0, 0, 0, 0
            ]
        ]
        result = self.game.view_of_states(self.game.after_states())
        self.assertEqual(expected, result)

    def test_after_state2(self):
        state = b"05R25R34R50B55R99B99B99B11u30u03u33u99r99b99r99r"
        self.game.setState(state)
        expected = [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
        ]
        result = self.game.view_of_states([self.game.crr_state()])[0]
        self.assertEqual(result, expected)
        expected = [[
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            0, 2, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            2, 0, 0, 2, 0, 0,
            0, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 0, 2, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 2, 0, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 2, 2, 0, 0,
            2, 0, 0, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 0, 2, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 0, 0, 0,
            2, 0, 2, 2, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 2, 0, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 2, 0, 0,
            0, 0, 0, 0, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 1, 0
            ], [
            0, 0, 0, 3, 0, 0,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 1
            ], [
            0, 0, 0, 3, 0, 0,
            0, 3, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 1, 0,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 2, 0, 0, 2,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 0,
            2, 0, 2, 0, 2, 0,
            1, 3, 3, 0, 0, 0
            ], [
            0, 0, 0, 3, 0, 1,
            0, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            3, 0, 0, 3, 0, 0,
            0, 0, 0, 2, 0, 2,
            2, 0, 2, 0, 0, 0,
            1, 3, 3, 0, 0, 0
        ]]
        result = self.game.view_of_states(self.game.after_states())
        self.assertEqual(expected, result)

    def test_on_act_num_rcvd(self):
        after_states = self.game.after_states()
        for i in range(len(after_states)):
            self.game.on_action_number_received(i)
            expected = self.game.view_of_states(after_states)[i][:-6]
            result = self.game.view_of_states([self.game.crr_state()])[0][:-6]
            # print(result)
            self.assertEqual(expected, result)
            self.setUp()


if __name__ == "__main__":
    unittest.main()
